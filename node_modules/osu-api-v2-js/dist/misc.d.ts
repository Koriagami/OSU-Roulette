/**
 * When using `fetch()` for a GET request, you can't just give the parameters the same way you'd give them for a POST request!
 * @param parameters The parameters as they'd be for a POST request (prior to using `JSON.stringify`)
 * @returns Parameters adapted for a GET request
 */
export declare function adaptParametersForGETRequests(parameters: {
    [k: string]: any;
}): {
    [k: string]: any;
};
/**
 * Some stuff doesn't have the right type to begin with, such as dates, which are being returned as strings, this fixes that
 * @param x Anything, but should be a string, an array that contains a string, or an object which has a string
 * @returns x, but with it (or what it contains) now having the correct type
 */
export declare function correctType(x: any, force_string?: boolean): any;
/**
 * This is an alternative to `AbortSignal.any` that is friendly to older versions of Node.js, it was provided by the kind https://github.com/baileyherbert
 * https://github.com/TTTaevas/osu-api-v2-js/issues/33#issuecomment-2062026279
 * @param signals The multiple signals you'd want `fetch()` to take
 * @returns A signal that's aborted when any of the `signals` is aborted
 * @remarks Will be safe to remove with Node 20
 */
export declare function anySignal(signals: AbortSignal[]): AbortSignal;
/**
 * A function that makes it easy to get the id from the argument of a function
 * @param arg The id or the object with the id
 * @returns The id
 */
export declare function getId(arg: number | {
    [key: string]: any;
}, property_name?: string): number;
