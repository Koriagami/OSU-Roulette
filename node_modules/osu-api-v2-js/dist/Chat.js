import { getId } from "./misc.js";
export var Chat;
(function (Chat) {
    let Channel;
    (function (Channel) {
        /**
         * Get a ChatChannel that you have joined, and the users in it if it is a private channel!
         * @scope {@link Scope"chat.read"}
         * @param channel The channel in question
         * @remarks Will 404 if the user has not joined the channel (use `joinChatChannel` for that)
         */
        async function getOne(channel) {
            const response = await this.request("get", `chat/channels/${getId(channel, "channel_id")}`);
            return response.channel; // NOT the only property; `users` is already provided within `channel` so it is useless
        }
        Channel.getOne = getOne;
        /**
         * Get a list of all publicly joinable channels!
         * @scope {@link Scope"chat.read"}
         */
        async function getAll() {
            return await this.request("get", "chat/channels");
        }
        Channel.getAll = getAll;
        /**
         * Mark a certain channel as read up to a given message!
         * @scope {@link Scope"chat.read"}
         * @param channel The channel in question
         * @param message You're marking this and all the messages before it as read!
         */
        async function markAsRead(channel, message) {
            const channel_id = getId(channel, "channel_id");
            const message_id = getId(message, "message_id");
            return await this.request("put", `chat/channels/${channel_id}/mark-as-read/${message_id}`, { channel_id, message_id });
        }
        Channel.markAsRead = markAsRead;
        /**
         * Create/Open/Join a private messages chat channel!
         * @scope {@link Scope"chat.read"}
         * @param user_target The other user able to read and send messages in this channel
         * @returns The newly created channel!
         */
        async function createPrivate(user_target) {
            return await this.request("post", "chat/channels", { type: "PM", target_id: getId(user_target) });
        }
        Channel.createPrivate = createPrivate;
        /**
         * Create a new announcement!
         * @scope {@link Scope"chat.write_manage"}
         * @param channel Details of the channel you're creating
         * @param user_targets The people that will receive your message
         * @param message The message to send with the announcement
         * @returns The newly created channel!
         * @remarks From my understanding, this WILL 403 unless the user is kinda special
         */
        async function createAnnouncement(channel, user_targets, message) {
            const target_ids = user_targets.map((u) => getId(u));
            return await this.request("post", "chat/channels", { type: "ANNOUNCE", channel, target_ids, message });
        }
        Channel.createAnnouncement = createAnnouncement;
        /**
         * Join a public or multiplayer ChatChannel, allowing you to interact with it!
         * @scope {@link Scope"chat.write_manage"}
         * @param channel The channel you wanna join
         * @param user The user joining the channel (defaults to the **presumed authorized user** (api.user))
         */
        async function joinOne(channel, user) {
            const user_id = user ? getId(user) : this.user ? this.user : "";
            return await this.request("put", `chat/channels/${getId(channel, "channel_id")}/users/${user_id}`);
        }
        Channel.joinOne = joinOne;
        /**
         * Leave/Close a public ChatChannel!
         * @scope {@link Scope"chat.write_manage"}
         * @param channel The channel you wanna leave/close
         * @param user The user leaving/closing the channel (defaults to the **presumed authorized user** (api.user))
         */
        async function leaveOne(channel, user) {
            const user_id = user ? getId(user) : this.user ? this.user : "";
            return await this.request("delete", `chat/channels/${getId(channel, "channel_id")}/users/${user_id}`);
        }
        Channel.leaveOne = leaveOne;
    })(Channel = Chat.Channel || (Chat.Channel = {}));
    let Message;
    (function (Message) {
        /**
         * Get the recent messages of a specific ChatChannel!
         * @scope {@link Scope"chat.read"}
         * @param channel The Channel you wanna get the messages from
         * @param limit The maximum amount of messages you want to get, up to 50! (defaults to **20**)
         * @param since Get the messages sent after this message
         * @param until Get the messages sent up to but not including this message
         */
        async function getMultiple(channel, limit = 20, since, until) {
            since = since ? getId(since, "message_id") : undefined;
            until = until ? getId(until, "message_id") : undefined;
            return await this.request("get", `chat/channels/${getId(channel, "channel_id")}/messages`, { limit, since, until });
        }
        Message.getMultiple = getMultiple;
        /**
         * Send a message in a ChatChannel!
         * @scope {@link Scope"chat.write"}
         * @param channel The channel in which you want to send your message
         * @param message The message you wanna send
         * @param is_action Is it a command? Like `/me dances` (defaults to **false**)
         * @returns The newly sent ChatMessage!
         */
        async function send(channel, message, is_action = false) {
            return await this.request("post", `chat/channels/${getId(channel, "channel_id")}/messages`, { message, is_action });
        }
        Message.send = send;
        /**
         * Send a private message to someone!
         * @scope {@link Scope"chat.write"}
         * @param user_target The User you wanna send your message to!
         * @param message The message you wanna send
         * @param is_action Is it a command? Like `/me dances` (defaults to **false**)
         * @param uuid A client-side message identifier
         * @returns The message you sent
         * @remarks You don't need to use `createChatPrivateChannel` before sending a message
         */
        async function sendPrivate(user_target, message, is_action = false, uuid) {
            return await this.request("post", "chat/new", { target_id: getId(user_target), message, is_action, uuid });
        }
        Message.sendPrivate = sendPrivate;
    })(Message = Chat.Message || (Chat.Message = {}));
    /**
     * Needs to be done periodically to reset chat activity timeout
     * @scope {@link Scope"chat.read"}
     * @param since UserSilences that are before that will not be returned!
     * @returns A list of recent silences
     * @remarks Every 30 seconds is a good idea
     */
    async function keepAlive(since) {
        const history_since = since?.user_silence ? getId(since.user_silence) : undefined;
        const message_since = since?.message ? getId(since.message, "message_id") : undefined;
        const response = await this.request("post", "chat/ack", { history_since, since: message_since });
        return response.silences; // It's the only property
    }
    Chat.keepAlive = keepAlive;
})(Chat || (Chat = {}));
